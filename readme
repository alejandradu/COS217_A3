Assignment 3 readme File

------------------------------------------------------------------------
What is your name?

Alejandra Duran-Urriago

------------------------------------------------------------------------
What authorized sources of information did you use to complete the
assignment? COPY THE LIST of authorized sources of information given
in the "Policies" web page (also available on armlab in the file
~cos217/AuthorizedSourcesList ) to this section of the readme file,
and edit it as appropriate.

The course's lectures.

The course's precepts.

The course's website.

Documents that are referenced directly by the course's website. Such 
documents include the course's lecture slides and precept handouts.

The course's textbooks.

The man pages on the armlab cluster.

The course's current staff members outside of class time through office 
hours.

Current Intro Lab TAs through visits to the Intro COS Lab.


------------------------------------------------------------------------
What unauthorized sources of information did you use to complete the
assignment? List any unauthorized sources of information that you used
to complete the assignment, and describe how you used them. The course
"Policies" web page defines unauthorized sources of information, and
any source that you have used but not listed in the authorized sources
should be included here. Please note that using an unauthorized source
may trigger a course penalty, and depending on the nature of the
interaction, may additionally require the interaction being reported
to the Committee on Discipline. Write "None" if you used no
unauthorized sources of information.

None

------------------------------------------------------------------------
What is your assessment of the assignment? Was it helpful? Was it fun?

Very helpful to reinforce my understanding of pointers. 
Found it very daunting at first, and some functions we were required 
to implement seemed trivial(like map). Good to understand
how to use valgrind to debug. Very time consuming.

------------------------------------------------------------------------
(optional) What information can you provide about your submission that
will help your grader to grade it in the most favorable light? In
particular, what bugs are in your submission?

No bugs that I know of. I would like to clarify that some
pieces of logic (such as traversing linked nodes/bindings) has
some repetitive pieces of code across different functions, but I did 
not find it better to write more helper static functions (for
example, similar to map()) that would make this more concise. This
is because, for every implementation of that logic, the action
and parameters needed at each binding location were different. So I 
would have ended writing as may helper functions as required functions
in the interface, which was worse.

------------------------------------------------------------------------
What warnings does splint generate on symtablelist.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

None

------------------------------------------------------------------------
What warnings does critTer generate on symtablelist.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

   symtablehash.c: line 196: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablehash.c: line 251: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablehash.c: line 380: medium priority:
   Do you want to validate 'pvExtra' through an assert?

Those assertions would compare a void pointer with a value that I do 
not know the type of. To properly do such an assertion, I would have to 
cast the value of the pointer to the expected type (which contradicts 
the point of having a void pointer, to assign different data to any
binding). Since I cannot do this cast, the assertion always fails 
producing the error "Aborted (core dumped)". Thus, I cannot include
those assertions.

------------------------------------------------------------------------
What warnings does splint generate on symtablehash.c, and what are your
disagreements with them? Copy the splint warnings here, and express your
disagreement after each warning. If there are no warnings, then write
"None."

symtablehash.c: (in function SymTable_expand)
symtablehash.c:181:30: Value NewBuckets[] used before definition
  An rvalue is used that may not be initialized to a value on some 
  execution path. (Use -usedef to inhibit warning)

The warning considers the case in which NewBuckets[hash] is undefined.
This value is accessed in a loop with 0 <= hash < oldCount (oldCOunt = 
previous bucket count before expansion). So the warning can be
ignored because all values of NewBuckets[] have been previously 
assigned in a loop with 0 <= hash= < newCount (expanded bucket count), 
where newCount > oldCount. 

------------------------------------------------------------------------
What warnings does critTer generate on symtablehash.c, and what are your
disagreements with them? Copy the critTer warnings here, and express
your disagreement after each warning. If there are no warnings, then
write "None."

   symtablehash.c: line 196: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablehash.c: line 251: medium priority:
   Do you want to validate 'pvValue' through an assert?

   symtablehash.c: line 380: medium priority:
   Do you want to validate 'pvExtra' through an assert?

Those assertions would compare a void pointer with a value that I do 
not know the type of. To properly do such an assertion, I would have to 
cast the value of the pointer to the expected type (which contradicts 
the point of having a void pointer, to assign different data to any
binding). Since I cannot do this cast, the assertion always fails 
producing the error "Aborted (core dumped)". Thus, I cannot include
those assertions.

------------------------------------------------------------------------
What are the CPU times reported by testsymtable.c with binding counts
50, 500, 5000, 50000, and 500000 using (1) your linked list
implementation, (2) your non-expanding hash table implementation, and
(3) your expanding hash table implementation? Fill in the blanks.

The linked list implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.005472 seconds.
-- 5000 bindings consumed 1.083140 seconds.
-- 50000 bindings consumed 109.452256 seconds.
-- 500000 bindings consumed More than 5 minutes.

The non-expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.010904 seconds.
-- 50000 bindings consumed 0.422311 seconds.
-- 500000 bindings consumed 79.194598 seconds.

The expanding hash table implementation with:
-- 50 bindings consumed 0.000000 seconds.
-- 500 bindings consumed 0.000000 seconds.
-- 5000 bindings consumed 0.009964 seconds.
-- 50000 bindings consumed 0.136224 seconds.
-- 500000 bindings consumed 1.787770 seconds.
